if __name__=="__main__":
    print("__name__")

   # File1.py 
print "File1 __name__ = %s" %__name__ 
  
if __name__ == "__main__": 
    print "File1 is being run directly"
else: 
    print "File1 is being imported"
    
#when we run a script __name__ is set to __main__
#when we import a script __name__ is set to the name of the script.

These imports use leading dots to indicate the current and parent packages involved in the relative import.
from . import echo
from .. import formats
from ..filters import equalizer


Its Name (which means name, an unique identifier) + Space(which talks something related to scope). Here, a name might be of any Python method or variable and space depends upon the location from where is trying to access a variable or a method.
-------------------------------------------------------------------------------
NON LOCAL VARAIBLES
EXAMPLE 1:
def yo():
    x="hello"
    def yo1():
        x="lisa"
    yo1()
    return x

OUTPUT:
 >>>yo()
'hello'
 
   
"""In the above example we have x globally declared in the yo() where x is assigned to "hello"
and we have used the same variable x inside the sub-function yo1() where x is assigned to"lisa"
here when we call the yo() we get output as "hello" and not as "lisa".This is because x variable inside the yo1() is local to that function"""

EXAMPLE 2:    
def yo():
    x="hello"
    def yo1():
        nonlocal x
        x="lisa"
    yo1()
    return x

OUTPUT:
    >>>yo()
    "lisa"
    
"""In this example we have used the nonlocal keyword to make the x variable inside yo1() nonlocal to yo()
hence x which was initailly assigned to "hello" is now reassigned to "lisa"

--------------------------------------------------------------------------------------

def yo():
	x="John"
	def yo1:
		
SyntaxError: invalid syntax
>>> def yo():
	x="John"
	def yo1():
		x="Pratz"
		def yo2():
			nonlocal x
			x="Rajat"
			def yo3():
				x="Ranjani"
	return x
    
    >>> print(yo())
John
>>> def yo():
	x="John"
	def yo1():
		x="Pratz"
		def yo2():
			nonlocal x
			x="Rajat"
			def yo3():
				x="Ranjani"
	yo1()
	return x

>>> print(yo())
John
>>> def yo():
	x="John"
	def yo1():
		x="Pratz"
		def yo2():
			nonlocal x
			x="Rajat"
			def yo3():
				x="Ranjani"
	yo1()
	yo2()
	yo3()
	return x
    
  >>> print(yo())
Traceback (most recent call last):
  File "<pyshell#39>", line 1, in <module>
    print(yo())
  File "<pyshell#38>", line 11, in yo
    yo2()
NameError: name 'yo2' is not defined
>>> def yo():
	x="John"
	def yo1():
		x="Pratz"
		def yo2():
			nonlocal x
			x="Rajat"
			def yo3():
				x="Ranjani"
	yo1()
	yo2()
	return x
    
    >>> print(yo())
Traceback (most recent call last):
  File "<pyshell#42>", line 1, in <module>
    print(yo())
  File "<pyshell#41>", line 11, in yo
    yo2()
NameError: name 'yo2' is not defined
>>> def yo():
	x="John"
	def yo1():
		x="Pratz"
		def yo2():
			nonlocal x
			x="Rajat"
			def yo3():
				x="Ranjani"
	yo1()
	yo3()
	return x


>>> print(yo())
Traceback (most recent call last):
  File "<pyshell#45>", line 1, in <module>
    print(yo())
  File "<pyshell#44>", line 11, in yo
    yo3()
NameError: name 'yo3' is not defined
>>> def yo():
	x="John"
	def yo1():
		x="Pratz"
		def yo2():
			nonlocal x
			x="Rajat"
			def yo3():
				x="Ranjani"
			yo3()
		yo2()
	yo1()
	return x

>>> print(yo())
John
>>> def yo():
	x="John"
	def yo1():
		x="Pratz"
	def yo2():
		nonlocal x
		x="Rajat"
		def yo3():
			x="Ranjani"
		yo3()
	yo2()
	yo1()
	return x
    
    >>> print(yo())
Rajat
>>> def yo():
	x="John"
	def yo1():
		x="Pratz"
	def yo2():
		nonlocal x
		x="Rajat"
		def yo3():
			nonlocal x
			x="Ranjani"
		yo3()
	yo2()
	yo1()
	return x
    
    >>> print(yo())
Ranjani
>>> def yo():
	x="John"
	def yo1():
		nonlocal x
		x="Pratz"
	def yo2():
		nonlocal x
		x="Rajat"
		def yo3():
			nonlocal x
			x="Ranjani"
		yo3()
	yo2()
	yo1()
	return x

>>> print(yo())
Pratz
----------------------------------------------------------------------------------------------
>>> def scope_test():
    def do_local():
        spam = "local spam"

    def do_nonlocal():
        nonlocal spam
        spam = "nonlocal spam"

    def do_global():
        global spam
        spam = "global spam"

    spam = "test spam"
    do_local()
    print("After local assignment:", spam)
    do_nonlocal()
    print("After nonlocal assignment:", spam)
    do_global()
    print("After global assignment:", spam)


>>> print(scope_test())
After local assignment: test spam
After nonlocal assignment: nonlocal spam
After global assignment: nonlocal spam
None
>>> print("In global scope:", spam)
In global scope: global spam
>>> def scope_test():
    def do_local():
        spam = "local spam"

    def do_nonlocal():
        nonlocal spam
        spam = "nonlocal spam"

    def do_global():
        nonlocal spam
        spam = "global spam"

    spam = "test spam"
    do_local()
    print("After local assignment:", spam)
    do_nonlocal()
    print("After nonlocal assignment:", spam)
    do_global()
    print("After global assignment:", spam)


>> print(scope_test())
After local assignment: test spam
After nonlocal assignment: nonlocal spam
After global assignment: global spam
None
>>> print("In global scope:", spam)
In global scope: global spam
>>> def scope_test():
    def do_local():
        spam = "local spam"

    def do_nonlocal():
        global spam
        spam = "nonlocal spam"

    def do_global():
        nonlocal spam
        spam = "global spam"

    spam = "test spam"
    do_local()
    print("After local assignment:", spam)
    do_nonlocal()
    print("After nonlocal assignment:", spam)
    do_global()
    print("After global assignment:", spam)

    
>>> print(scope_test())
After local assignment: test spam
After nonlocal assignment: test spam
After global assignment: global spam
None
>>> print("In global scope:", spam)
In global scope: nonlocal spam

-----------------------------------------------------------------------------------------
Question: Can we write a class inside a function??
YES
EXAMPLE:

def a():
	class b:
		def c(self):
			print("In c")
	z=b()
	z.c()

OUTPUT:
>>> a()
In c
------------------------------------------------------------------------------------------
Private attributes:-

class friends:
	def __init__(self,f1,f2):
		self.__first=f1
		self.__second=f2
	def display(self):
		print(self._friends__first+self._friends__second)

	
class frands(friends):
	def display(self):
		print(self._friends__first+self._friends__second)

Output:-
>>> s=friends("r",'t')
>>> s.display()
rt
>>> s=frands("r",'t')
>>> s.display()
rt

---------------------------------------------------------------------------------------------
Protected attributes:-

class friends:
	def __init__(self,f1,f2):
		self._first=f1
		self._second=f2
	def display(self):
		print(self._first+self._second)

	
class frands(friends):
	def display(self):
		print(self._first+self._second)
		
Output:-
>>> s=friends("r",'t')
>>> s.display()
rt
>>> s=frands("r",'t')
>>> s.display()
rt
-------------------------------------------------------------------------------------------------
Public attributes:-

class friends:
	def __init__(self,f1,f2):
		self.first=f1
		self.second=f2
	def display(self):
		print(self.first+self.second)

	
class frands(friends):
	def display(self):
		print(self.first+self.second)
		
Output:-
>>> s=friends("r",'t')
>>> s.display()
rt
>>> s=frands("r",'t')
>>> s.display()
rt
---------------------------------------------------------------------------------------------------
ITERATORS AND ITERABLE

what is iterable?
An object is iterable if it has only "__iter__" method and not "__next__" method

what is iterator?
An object is iterator if it has both "__iter__" method and "__next__" method

let's take an example to understand:
EXAMPLE 1:
>>>l=[1,2,3,4]
>>> dir(l)
['__add__', '__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__init_subclass__', '__iter__', '__le__', 
'__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'append', 'clear', 'copy', 'count', 'extend', 'index', 'insert',
'pop', 'remove', 'reverse', 'sort']

from the above example we can see that the list l is iterable because it has only __iter__ method and not __next__ method

we can also perform another experiment to check if l is iterator or iterable

>>>nums=l.__iter__
>>>print(nums)
<method-wrapper '__iter__' of list object at 0x030ED3F0>

this can be equivalently written as

>>>nums=iter(l)
>>>print(nums)
<list_iterator object at 0x034FE870>

As we can see the object l does not have __next__ so it is iterable.
when the __iter__method is called it holds the state of the object and to point to the next state so that we can iterate over
the object the __iter__ method calls __next__method.Hence we can say the __iter__ is the iterator. 
To understand this clearly lets take an example:


>>>dir(iter(l))
['__class__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__',
'__length_hint__', '__lt__', '__ne__', '__new__', '__next__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__setstate__', '__sizeof__', '__str__', '__subclasshook__']

here we can see there is __next__.
so it is an iterator

Now let's try writing a class that has __iter__ and __next__ method

class myrange:
	def __init__(self,start,end):
		self.value=start
		self.end=end
	def __iter__(self):
		return self
	def __next__(self):
		if self.value>=self.end:
			raise StopIteration
		current=self.value
		self.value=self.value+1
		return current


>>>x=myrange(1,10)
>>>print(x.__next__)
<bound method myrange.__next__ of <__main__.myrange object at 0x034FE850>>

which can be equivalently written as
print(x)
<__main__.myrange object at 0x034FE850>

but 
when we write it as:
>>> x=myrange(1,10)
>>> for i in x:
	print(i)


1
2
3
4
5
6
7
8
9

here we get the output because for loop invokes the __iter__ method in the object x 

---------------------------------------------------------------------------------------------------

We can use Generators to create iterators

def my_range(start,end):
	current=start
	while current<end:
		yield current
		current=current+1

>>> x=my_range(1,10)
>>> for i in x:
	print(i)

1
2
3
4
5
6
7
8
9

yield is used to hold the present value of the object.
------------------------------------------------------------------------------------------------------






